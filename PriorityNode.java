/** * A priority node class 
 *
 * @author Yucen Zhang
 */public class PriorityNode<T>{	private PriorityNode<T> next;	private T element;	private double priority;	/**	 * Creates an empty node.	 */	public PriorityNode(){		next= null;		element = null;		priority = Double.MAX_VALUE;	}	/**	 * Creates a node storing the specified element.	 * @param my_priority  the priority value 	 * @param elem  the element to be stored within the new node	 */	public PriorityNode(T elem, double my_priority){		next=null;		element = elem;		priority = my_priority;	}	/**	 * Returns the node that follows this one.	 *	 * @return  the node that follows the current one	 */	public PriorityNode<T> getNext(){		return next;	}	/**	 * Returns the element stored in this node.	 *	 * @return  the element stored in this node	 */	public T getElement(){		return element;	}	/**	 * Returns the priority stored in this node.	 *	 * @return  the priority stored in this node	 */	public double getPriority(){		return priority;	}	/**	 * Sets the node that follows this one.	 *	 * @param node  the node to be set to follow the current one	 */	public void setNext(PriorityNode<T> node){		next = node ; 	}	/**	 * Sets the element stored in this node.	 *	 * @param elem  the element to be stored in this node	 */	public void setElement(T elem){		element = elem;	}	/**	 * Sets the priority stored in this node.	 *	 * @param p  the priority to be stored in this node	 */	public void setPriority(double p){		priority = p;	}}
